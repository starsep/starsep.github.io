<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Software - Tag - Filip Czaplicki</title><link>https://starsep.com/tags/software/</link><description>Software - Tag - Filip Czaplicki</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 09 Aug 2023 21:35:26 +0200</lastBuildDate><atom:link href="https://starsep.com/tags/software/" rel="self" type="application/rss+xml"/><item><title>CLI</title><link>https://starsep.com/posts/cli/</link><pubDate>Wed, 09 Aug 2023 21:35:26 +0200</pubDate><guid>https://starsep.com/posts/cli/</guid><description>This is the list of CLI tools I found useful someday. It is useful reference as remembering all script names and options is cumbersome. Especially those I use rarely.
ripgrep rg (ripgrep): great grep replacement.
Recursive search and respects .gitignore by default.
Possible to configure per repository with .rgignore
Useful options:
-i: case insentive -v: invert matching -A n(after), -B n(before), -C n(context). n is number of lines -u, -uu, -uuu: unrestricted searching with gitignored, hidden, and binary files -l: list files matching -e: pattern (regex) to search for.</description></item><item><title>Nix</title><link>https://starsep.com/posts/nix/</link><pubDate>Sun, 25 Jun 2023 14:49:31 +0200</pubDate><guid>https://starsep.com/posts/nix/</guid><description>What is Nix? I recently started using Nix. It is a package manager and a build system. It uses its own functional programming language. At the moment I use it only as a package manager. For years, I maintained Ansible playbook for setting up my development environments. Nix allows to simplify it and eventually might even replace it. Instead of installing software via apt/pipx/downloading binaries from GitHub I use Nix.</description></item></channel></rss>